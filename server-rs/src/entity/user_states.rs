//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "UserStates")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub twitter_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub recorded_time: DateTimeUtc,
    #[sea_orm(primary_key, auto_increment = false)]
    pub series: u8,
    pub status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user_states_master::Entity",
        from = "Column::Status",
        to = "super::user_states_master::Column::State",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    UserStatesMaster,
}

impl Related<super::user_states_master::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserStatesMaster.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
